@use 'sass:meta';
@use 'sass:map';
@use '~breakpoint-sass/stylesheets/breakpoint' as *;
@use '../breakpoints/index' as *;

// For each argument either a single value, or a breakpoint map can be passed
// If a breakpoint map is passed for more than one arugment, each must include
// all of the same breakpoints
@mixin proportional-box($aspect-ratio, $vw: 100vw, $offset: 0px) {
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;

    @if (meta.type-of($aspect-ratio) == 'map') {
        @include proportional-box-responsive($aspect-ratio, $aspect-ratio, $vw, $offset);
    } @else if (meta.type-of($vw) == 'map') {
        @include proportional-box-responsive($vw, $aspect-ratio, $vw, $offset);
    } @else if (meta.type-of($offset) == 'map') {
        @include proportional-box-responsive($offset, $aspect-ratio, $vw, $offset);
    } @else {
        @include proportional-height($aspect-ratio, $vw, $offset)
    }
}

@mixin proportional-height($aspect-ratio, $vw, $offset) {
    height: calc(#{1 / $aspect-ratio} * ($vw - 2 * #{$offset}));
}

// Only the keys matter in the sizes map. The values aren't touched.
@mixin proportional-box-responsive($sizes, $aspect-ratio, $vw, $offset) {
    @each $breakpoint, $size in $sizes {

        $bp-ratio: $aspect-ratio;
        @if (meta.type-of($aspect-ratio) == 'map') {
            $bp-ratio: map.get($aspect-ratio, $breakpoint)
        } 

        $bp-vw: $vw;
        @if (meta.type-of($vw) == 'map') {
            $bp-vw: map.get($vw, $breakpoint)
        }

        $bp-offset: $offset;
        @if (meta.type-of($offset) == 'map') {
            $bp-offset: map.get($offset, $breakpoint)
        }

        @if $breakpoint == 'base' {
            @include proportional-height($bp-ratio, $bp-vw, $bp-offset);
        } @else {
            @include breakpoint(map-get($breakpointList, $breakpoint)) {
                @include proportional-height($bp-ratio, $bp-vw, $bp-offset);
            }
        }
    }
}