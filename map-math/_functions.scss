@function map-multiply($value1, $value2, $calc: false) {
    @if (meta.type-of($value1) == 'map') {
        @return map-multiply-responsive($value1, $value1, $value2, $calc);
    } @else if (meta.type-of($value2) == 'map') {
        @return map-multiply-responsive($value2, $value1, $value2, $calc);
    } @else {
        @if $calc {
            @return calc(#{$value1} * #{$value2});
        }
        @return $value1 * $value2;
    }
}

@function map-multiply-responsive($sizes, $value1, $value2, $calc: false) {
    $map: ();

    @each $breakpoint, $size in $sizes {
        $bp-value1: $value1;
        @if (meta.type-of($value1) == 'map') {
            $bp-value1: map.get($value1, $breakpoint)
        }

        $bp-value2: $value2;
        @if (meta.type-of($value2) == 'map') {
            $bp-value2: map.get($value2, $breakpoint)
        }
        @if $calc {
            $map: map.set($map, $breakpoint, calc(#{$bp-value1} * #{$bp-value2}));
        } @else {
            $map: map.set($map, $breakpoint, $bp-value1 * $bp-value2);
        }
    }

    @return $map;
}

@function map-divide($value1, $value2, $calc: false) {
    @if (meta.type-of($value1) == 'map') {
        @return map-divide-responsive($value1, $value1, $value2, $calc);
    } @else if (meta.type-of($value2) == 'map') {
        @return map-divide-responsive($value2, $value1, $value2, $calc);
    } @else {
        @if $calc {
            @return calc(#{$value1} / #{$value2});
        }
        @return $value1 / $value2;
    }
}

@function map-divide-responsive($sizes, $value1, $value2, $calc: false) {
    $map: ();

    @each $breakpoint, $size in $sizes {
        $bp-value1: $value1;
        @if (meta.type-of($value1) == 'map') {
            $bp-value1: map.get($value1, $breakpoint)
        }

        $bp-value2: $value2;
        @if (meta.type-of($value2) == 'map') {
            $bp-value2: map.get($value2, $breakpoint)
        }
        @if $calc {
            $map: map.set($map, $breakpoint, calc(#{$bp-value1} / #{$bp-value2}));
        } @else {
            $map: map.set($map, $breakpoint, $bp-value1 / $bp-value2);
        }
    }

    @return $map;
}

@function map-add($value1, $value2, $calc: false) {
    @if (meta.type-of($value1) == 'map') {
        @return map-add-responsive($value1, $value1, $value2, $calc);
    } @else if (meta.type-of($value2) == 'map') {
        @return map-add-responsive($value2, $value1, $value2, $calc);
    } @else {
        @if $calc {
            @return calc(#{$value1} + #{$value2});
        }
        @return $value1 + $value2;
    }
}

@function map-add-responsive($sizes, $value1, $value2, $calc: false) {
    $map: ();

    @each $breakpoint, $size in $sizes {
        $bp-value1: $value1;
        @if (meta.type-of($value1) == 'map') {
            $bp-value1: map.get($value1, $breakpoint)
        }

        $bp-value2: $value2;
        @if (meta.type-of($value2) == 'map') {
            $bp-value2: map.get($value2, $breakpoint)
        }
        @if $calc {
            $map: map.set($map, $breakpoint, calc(#{$bp-value1} + #{$bp-value2}));
        } @else {
            $map: map.set($map, $breakpoint, $bp-value1 + $bp-value2);
        }
    }

    @return $map;
}

@function map-subtract($value1, $value2, $calc: false) {
    @if (meta.type-of($value1) == 'map') {
        @return map-subtract-responsive($value1, $value1, $value2, $calc);
    } @else if (meta.type-of($value2) == 'map') {
        @return map-subtract-responsive($value2, $value1, $value2, $calc);
    } @else {
        @if $calc {
            @return calc(#{$value1} - #{$value2});
        }
        @return $value1 - $value2;
    }
}

@function map-subtract-responsive($sizes, $value1, $value2, $calc: false) {
    $map: ();

    @each $breakpoint, $size in $sizes {
        $bp-value1: $value1;
        @if (meta.type-of($value1) == 'map') {
            $bp-value1: map.get($value1, $breakpoint)
        }

        $bp-value2: $value2;
        @if (meta.type-of($value2) == 'map') {
            $bp-value2: map.get($value2, $breakpoint)
        }
        @if $calc {
            $map: map.set($map, $breakpoint, calc(#{$bp-value1} - #{$bp-value2}));
        } @else {
            $map: map.set($map, $breakpoint, $bp-value1 - $bp-value2);
        }
    }

    @return $map;
}